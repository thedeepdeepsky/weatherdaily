name: Generate Weather Charts

on:
  schedule:
    # Example: Runs daily 15 minutes past midnight UTC
    # Adjust timing relative to your data fetch workflow
    - cron: '15 16 * * *'
  # Option: Trigger after the fetch workflow completes (if in the same repo)
  # workflow_run:
  #   workflows: ["Fetch Weather Data"] # Replace with the actual name of your fetch workflow
  #   types:
  #     - completed
  # Option: Allow manual triggering from the Actions tab
  workflow_dispatch:

jobs:
  build_charts:
    # Optional: Only run if triggered by a successful workflow_run
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      # Read permission might be needed for workflow_run trigger
      actions: read
      # Write permission is needed to commit files back to the repository
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Optional: Checkout the specific commit from the triggering workflow run
        # with:
        #   ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Specify the Python version your plot script requires
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install libraries needed by plot_weather.py
          pip install matplotlib pandas numpy # Ensure numpy is installed if plot script uses it

      - name: Generate weather charts
        # Executes your Python script to create the .png files
        run: |
          set -e # Exit script immediately if any command fails
          python plot_weather.py

      # This step commits the generated charts if they have changed
      - name: Commit and push charts
        run: |
          set -e # Exit immediately if a command exits with a non-zero status

          echo "Configuring Git Bot User..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Define the list of ALL expected chart files
          # Ensure these filenames match the output from plot_weather.py
          CHART_FILES="temperature_chart.png \
                       cloud_cover_total_chart.png \
                       cloud_cover_low_chart.png \
                       cloud_cover_mid_chart.png \
                       cloud_cover_high_chart.png \
                       wind_speed_10m_chart.png \
                       wind_speed_80m_chart.png \
                       wind_speed_120m_chart.png \
                       wind_speed_180m_chart.png \
                       wind_direction_10m_chart.png \
                       wind_direction_80m_chart.png \
                       wind_direction_120m_chart.png \
                       wind_direction_180m_chart.png \
                       wind_gusts_10m_chart.png \
                       apparent_temperature_chart.png \
                       precipitation_probability_chart.png \
                       precipitation_chart.png \
                       rain_chart.png \
                       showers_chart.png"

          # Accumulate files that were successfully generated
          FILES_TO_COMMIT=""

          echo "Checking for generated chart files to commit..."
          for file in $CHART_FILES; do
            # Check if the file exists (this version uses -f, not -s for non-empty)
            if [ -f "$file" ]; then
              echo "Found: $file"
              # Append filename with a leading space for separation
              FILES_TO_COMMIT="$FILES_TO_COMMIT $file"
            else
              # File does not exist (this might be expected if data was missing)
              # echo "Debug: Expected chart file '$file' not found." # Uncomment for debugging
              : # No action needed if file is missing
            fi
          done

          # Remove leading/trailing whitespace from the list (important!)
          FILES_TO_COMMIT=$(echo "$FILES_TO_COMMIT" | xargs)

          # Check if any files were found
          if [ -z "$FILES_TO_COMMIT" ]; then
             echo "No chart files found to commit. Exiting."
             exit 0 # Exit cleanly
          fi

          echo "Staging the following files: $FILES_TO_COMMIT"
          # Stage all valid generated chart files found
          # Using 'echo | xargs' handles potential filenames issues safely
          echo "$FILES_TO_COMMIT" | xargs git add

          echo "Checking for actual changes in staged files..."
          # Check if staging resulted in any actual changes compared to the last commit
          if git diff --staged --quiet; then
            echo "No effective changes detected in the staged chart files. Nothing to commit."
            # Optional: Unstage the files if no changes detected
            # echo "$FILES_TO_COMMIT" | xargs git reset HEAD --
            exit 0 # Exit cleanly
          fi

          # If changes exist, commit and push them
          echo "Changes detected in chart files. Committing..."
          COMMIT_MSG="Update weather charts - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "Commit message: $COMMIT_MSG"
          # Commit only the specific files that were staged
          git commit -m "$COMMIT_MSG"

          echo "Pushing changes..."
          git push
